use dep::bignum::BigNum;
use dep::bignum::runtime_bignum::BigNumInstance;
use dep::bignum::fields::Params2048;
use dep::noir_rsa::RSA;

type BN2048 = BigNum<18, Params2048>;
type BNInstance = BigNumInstance<18, Params2048>;
type RSA2048 = RSA<BN2048, BNInstance, 256>;

fn main_real(pubkey: [u8; 256], signature: [u8; 256], pubkey_redc_param: BN2048) {
    let sha256_hash: [u8; 32] = dep::std::hash::sha256("hello world".as_bytes());
    let modulus: BN2048 = BigNum::from_byte_be(pubkey);
    let signature: BN2048 = BigNum::from_byte_be(signature);

    let instance: BNInstance = BigNumInstance::new(modulus.limbs, pubkey_redc_param.limbs);

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(instance, sha256_hash, signature));
}

fn main() {
    let sha256_hash: [u8; 32] = dep::std::hash::sha256("hello world".as_bytes());
    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0x23b3c410fe1489de48d6b08f01a489, 0x427f459c5e2e84aa7ed9311c15f155, 0xc5cebaf7f9199f5b5ceeaeb8f34e7a, 0xc5172069a45f34aa2674aa2d7f2100, 0xc9e9e48678dacde84a6563ae09cd63, 0xa5ccd7a0e76ba4b3a2aa8e57310aa8, 0x3aa19b4768eb8fac079ad79684a014, 0xdc655ae7c02385c1017e4f51cfacdb, 0x9b9755187cbf26541fa9128fa971f2, 0xfac30e9668a02b166941811a1e4cfb, 0xa17e8c681ccc8c3ec63cdd8729a223, 0xb5133c8c5bb6327baef42c88d97b13, 0x9f20fc2c965f1bffc029b56ccab1d3, 0xbb3be90ac7c7d65eba6d5cdc408058, 0x55143005ddb573760dc480673653f4, 0x709824a08eaa37d0d8aee421142e7d, 0xf8e57994175767acfba50065192cd4, 0xb3
    ]
    );
    let instance: BNInstance = BigNumInstance::new(
        [
        0xba4baae029abaf79370223f822dcb1, 0xba7463552f29fc266e16998778d79f, 0x851d4c66e8e426ca3b07cf13d4bb07, 0x5a6ebce6b380b5ffd793bb1529cb9f, 0x2488a6500574c4609e02e130983f42, 0x1d49571bd3615c2adf64136e409f4f, 0x14e7a95d93ac6cd2723a7fac33d6fd, 0xc4bcf5680fcb4f690f407fd05b23cd, 0x48546e83cc4139294462db99b7f80f, 0x8f4739dd723bb0c2b626527f9c565e, 0xc3fba68de10131c49d6611a6667ce2, 0xcef87738516175ee7390224e94cec7, 0x76f3a0d6b1681c26ce5d89ae67a8fd, 0xfb36e9b787e2ec2b09f70d95720e5e, 0x6a96c27d12f80398c146fbe5bbf40b, 0x4c8dc2089aff029fb0853bb9c6cfc1, 0x6148dacb2348c246461634078e53b6, 0xd6
    ],
        [
        0xb63f5ef258d7d3f64671a733a1a32e, 0x0925f4fbde492d3b8ab79dbf23561e, 0x440e61c6ff6c260c66a30c6e071d73, 0x1f17ff65243c78ac9f4d3afa7be3ff, 0xee1ae81a72f69c42163740dd2c0304, 0x8f40c80b53c40ee17986633c1965d3, 0x2378be4b395dbefec108a914279506, 0x8347b9d9dc989bae9da9dce46341ee, 0x939c0e5e9017ed5fcffa71da7261bb, 0x4726297f18d4a5a29f01927f73c9f8, 0x2d89c78f8b3a26c96bf0862a72ef01, 0xccf2292fc359c7beffe33474c0c79b, 0x18e8fe2a9e8d0d4f4c526c1a97b0be, 0xa47e2f166cdf310a3e18c03b3a947f, 0x489b914e8a0a0ce0abf8da10ea73a9, 0x1080a0a08a3276be39a5df3ec08622, 0xb33beb346c7ff0c3144811ec69ad78, 0x0131
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(instance, sha256_hash, signature));
}

// #[test]
// fn test_verify_sha256_pkcs1v15_2048() {
//     let pubkey: [u8; 256] = [
//         208, 69, 133, 28, 1, 117, 196, 234, 21, 136, 85, 133, 79, 19, 196, 233, 14, 219, 196, 199, 86, 166, 251, 95, 81, 73, 138, 215, 15, 40, 122, 82, 107, 178, 179, 173, 99, 4, 21, 166, 253, 44, 180, 88, 239, 103, 238, 214, 3, 22, 104, 193, 60, 182, 56, 55, 205, 84, 95, 101, 229, 230, 158, 100, 233, 105, 94, 170, 66, 116, 171, 130, 15, 211, 192, 99, 79, 33, 187, 4, 112, 208, 6, 248, 247, 34, 136, 65, 177, 249, 74, 130, 36, 69, 169, 244, 93, 91, 71, 60, 228, 223, 103, 77, 98, 191, 21, 214, 25, 86, 58, 16, 75, 177, 155, 172, 107, 79, 28, 16, 6, 204, 51, 212, 202, 204, 117, 190, 163, 47, 193, 184, 227, 32, 170, 233, 190, 239, 111, 49, 200, 85, 238, 194, 84, 113, 79, 58, 23, 127, 227, 56, 239, 231, 42, 141, 119, 61, 215, 19, 116, 97, 109, 119, 131, 94, 245, 108, 67, 119, 171, 19, 129, 136, 151, 51, 217, 134, 142, 138, 160, 148, 0, 170, 220, 191, 138, 204, 126, 119, 22, 107, 219, 248, 14, 123, 15, 255, 207, 25, 82, 129, 131, 120, 137, 255, 53, 187, 19, 239, 124, 229, 1, 211, 87, 119, 34, 200, 65, 63, 59, 6, 9, 81, 196, 186, 130, 76, 245, 140, 252, 123, 135, 48, 102, 131, 246, 231, 217, 73, 110, 20, 249, 60, 103, 193, 246, 148, 217, 204, 220, 114, 71, 199, 86, 195
//     ];
//     let signature: [u8; 256] = [
//         98, 57, 41, 128, 194, 217, 99, 49, 219, 71, 215, 206, 219, 148, 177, 229, 42, 0, 113, 14, 243, 234, 164, 113, 172, 95, 227, 80, 193, 67, 121, 16, 139, 152, 210, 84, 130, 79, 75, 190, 190, 226, 28, 61, 229, 223, 15, 136, 129, 78, 165, 90, 169, 67, 134, 203, 221, 56, 53, 147, 79, 90, 58, 143, 241, 64, 105, 215, 34, 2, 92, 58, 235, 45, 47, 142, 186, 122, 161, 89, 213, 219, 205, 231, 121, 246, 127, 61, 98, 115, 97, 116, 28, 115, 19, 42, 48, 49, 4, 79, 211, 131, 69, 90, 83, 73, 25, 229, 166, 73, 249, 112, 227, 40, 1, 191, 188, 147, 53, 49, 22, 67, 155, 41, 52, 121, 37, 248, 245, 128, 243, 165, 77, 3, 6, 137, 131, 125, 236, 150, 135, 19, 251, 98, 223, 176, 191, 141, 21, 148, 121, 62, 90, 218, 147, 113, 83, 118, 80, 46, 201, 241, 131, 207, 83, 220, 114, 16, 139, 68, 143, 222, 82, 154, 85, 214, 95, 15, 64, 249, 96, 230, 207, 57, 176, 137, 213, 105, 194, 188, 111, 161, 33, 14, 178, 65, 57, 152, 94, 70, 208, 202, 127, 88, 128, 62, 70, 171, 33, 253, 218, 102, 72, 27, 149, 101, 184, 182, 69, 77, 69, 205, 129, 210, 117, 212, 132, 67, 59, 11, 96, 107, 132, 242, 156, 96, 249, 36, 115, 212, 169, 69, 217, 183, 124, 42, 202, 54, 115, 19, 137, 224, 202, 175, 64, 52
//     ];
//     let pubkey_redc_param: BN2048 = BigNum::from_array(
//         [
//         0xe27ea846b41316f90fc9c7e4c49851, 0xd8ab4eb34f6973b145a13beedb39cc, 0xb29b2f98bf0162b63bfbc6139826e3, 0xb9232cfaee8264ec4ed6edf2a63871, 0x87e28b4bba64078b96a304f9afc158, 0xc580497e3bf3f8f05e53e455ce4209, 0x469573a6fd28a34b08f1bc4e50d0af, 0x1fe42df1234d7b7b33028e7bf3e150, 0x7866b6cd30bd6bcc78c49939fc49ed, 0x1209f03e4be654ac7d0e6bc0783319, 0xbd42554310338085b9eda975cc1453, 0xadd64b1efce423014bde32c8668563, 0x11a8d72925f31d07b69b99b1ecb5fb, 0x381327e4da1422a09d24736e2ddc97, 0x061d2a9fccb23a78ee5c38fd2dcd5a, 0xf948d95ac4734d6181c32e24660125, 0xaa85727b87a3fee3a296ccf0cf3f79, 0x013a
//     ]
//     );
//     main(pubkey, signature, pubkey_redc_param);
// }

// #[test]
fn test_verify_hardcoded() {
    let body_hash: [u8; 32] = dep::std::hash::sha256("hello world".as_bytes());
    print(body_hash);
    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0x699d829d4c71f7c70193ca0a191977, 0xd4350359a1c021aadd8b80a61e267a, 0xd3ea91d83a8fad2a03e4313e98680e, 0x8ec7272928f5fb6b33993a445ca46f, 0xd85f12cd88622a0015a9b227e55d21, 0x92c8ce907ce84ee5105f4571b4cf8d, 0x13ab7f16f623185b52d59d180d25c8, 0xc66e4a166a54ed5c885ca60dd547b1, 0x7b48fbd72eb0bbf9f32435849a23bb, 0xb59d0b97ca508e37f13bda39c7438c, 0x6913e3ffee17ea1bb87758e15b9b, 0xad2f16d1fc10bae73936165639332c, 0xadaf44877e744f044af7ba1a366094, 0x277a53919a66b6434471cf20cf1e4a, 0x027998454edd03887f0e3442a03689, 0x583e406e2f1d47a933020a37117e3f, 0x50ed7fb795c8422f675b462e01f4c4, 0xbe
    ]
    );
    let instance: BNInstance = BigNumInstance::new(
        [
        0xd5ca1625c4812e9e4ca665abee5d51, 0x060b7e4cff893ddbb427758e87513b, 0xe5aafc9311637ae595ff706849878e, 0xda80381ead5b6883dca7024219dbeb, 0x04847637b44b630468ef12c1b2273f, 0xf5304e30920402ee190cf9e09fda3b, 0x30ac86e5f5e46ab09a53d0f14a8fc0, 0x4bfdb907dbc9e6d4379f699494dd97, 0x65ab2f9193cb0e3b7003dae7eb1a11, 0x58a745aa16f43c5bde01c80735df8b, 0x138c6d2cbaf66e0e52281e65740cdc, 0x0e1533a357145bf96f3c6865d7434c, 0xcd042e426ff9b8617348f9dc5a87ec, 0x9f77bbae521bac765d84f7bcc4f6ab, 0xa61d867ccedc5af3856381376a2b11, 0x837f50394164a045637c86a79615c2, 0x41d666654d34d522b2aa912c6cbc67, 0xca
    ],
        [
        0x1710b2f4e3d76cf9a8ccdadeddaa17, 0x3b87cd64761348b0473f082efba185, 0x33ba297ac30530bd8bfe99c6e2b1cb, 0x57d5c9102794eeb8e78907f242bd6d, 0x7aa4614d86d68706dea3d08888e460, 0x3a95ccde66f57826fa6b9b0aa71276, 0xf20eeb2d1d93cc394c74dc6f518d06, 0x45874e8ba436e058ebb673bb983472, 0x66b4aca5c84d5c83d48ccdb5831f88, 0x4ea6183b56380e39f0b5367a22b753, 0x1b346132e22015993feb375fee7604, 0x3ab712426d939de5b20b00d8cfa9e5, 0x2653c8091d96e67138b2a8fdfe8a76, 0xa308ff7308d4e80623a33563dc0dd9, 0x742517f5af6a17ef71c1e9de6d320e, 0x9c820429d03be55b1ad99a8681c548, 0x05ea9e434fefbaf1968f73fe233b5f, 0x0144
    ]
    );
    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(instance, body_hash, signature));
}

fn test_main_real() {
    let pubkey: [u8; 256] = [
        214, 97, 72, 218, 203, 35, 72, 194, 70, 70, 22, 52, 7, 142, 83, 182, 76, 141, 194, 8, 154, 255, 2, 159, 176, 133, 59, 185, 198, 207, 193, 106, 150, 194, 125, 18, 248, 3, 152, 193, 70, 251, 229, 187, 244, 11, 251, 54, 233, 183, 135, 226, 236, 43, 9, 247, 13, 149, 114, 14, 94, 118, 243, 160, 214, 177, 104, 28, 38, 206, 93, 137, 174, 103, 168, 253, 206, 248, 119, 56, 81, 97, 117, 238, 115, 144, 34, 78, 148, 206, 199, 195, 251, 166, 141, 225, 1, 49, 196, 157, 102, 17, 166, 102, 124, 226, 143, 71, 57, 221, 114, 59, 176, 194, 182, 38, 82, 127, 156, 86, 94, 72, 84, 110, 131, 204, 65, 57, 41, 68, 98, 219, 153, 183, 248, 15, 196, 188, 245, 104, 15, 203, 79, 105, 15, 64, 127, 208, 91, 35, 205, 20, 231, 169, 93, 147, 172, 108, 210, 114, 58, 127, 172, 51, 214, 253, 29, 73, 87, 27, 211, 97, 92, 42, 223, 100, 19, 110, 64, 159, 79, 36, 136, 166, 80, 5, 116, 196, 96, 158, 2, 225, 48, 152, 63, 66, 90, 110, 188, 230, 179, 128, 181, 255, 215, 147, 187, 21, 41, 203, 159, 133, 29, 76, 102, 232, 228, 38, 202, 59, 7, 207, 19, 212, 187, 7, 186, 116, 99, 85, 47, 41, 252, 38, 110, 22, 153, 135, 120, 215, 159, 186, 75, 170, 224, 41, 171, 175, 121, 55, 2, 35, 248, 34, 220, 177
    ];
    let signature: [u8; 256] = [
        179, 248, 229, 121, 148, 23, 87, 103, 172, 251, 165, 0, 101, 25, 44, 212, 112, 152, 36, 160, 142, 170, 55, 208, 216, 174, 228, 33, 20, 46, 125, 85, 20, 48, 5, 221, 181, 115, 118, 13, 196, 128, 103, 54, 83, 244, 187, 59, 233, 10, 199, 199, 214, 94, 186, 109, 92, 220, 64, 128, 88, 159, 32, 252, 44, 150, 95, 27, 255, 192, 41, 181, 108, 202, 177, 211, 181, 19, 60, 140, 91, 182, 50, 123, 174, 244, 44, 136, 217, 123, 19, 161, 126, 140, 104, 28, 204, 140, 62, 198, 60, 221, 135, 41, 162, 35, 250, 195, 14, 150, 104, 160, 43, 22, 105, 65, 129, 26, 30, 76, 251, 155, 151, 85, 24, 124, 191, 38, 84, 31, 169, 18, 143, 169, 113, 242, 220, 101, 90, 231, 192, 35, 133, 193, 1, 126, 79, 81, 207, 172, 219, 58, 161, 155, 71, 104, 235, 143, 172, 7, 154, 215, 150, 132, 160, 20, 165, 204, 215, 160, 231, 107, 164, 179, 162, 170, 142, 87, 49, 10, 168, 201, 233, 228, 134, 120, 218, 205, 232, 74, 101, 99, 174, 9, 205, 99, 197, 23, 32, 105, 164, 95, 52, 170, 38, 116, 170, 45, 127, 33, 0, 197, 206, 186, 247, 249, 25, 159, 91, 92, 238, 174, 184, 243, 78, 122, 66, 127, 69, 156, 94, 46, 132, 170, 126, 217, 49, 28, 21, 241, 85, 35, 179, 196, 16, 254, 20, 137, 222, 72, 214, 176, 143, 1, 164, 137
    ];
    // let pubkey_redc_param: BN2048 = BigNum::from_array(
    //     [
    //     0xb63f5ef258d7d3f64671a733a1a32e, 0x0925f4fbde492d3b8ab79dbf23561e, 0x440e61c6ff6c260c66a30c6e071d73, 0x1f17ff65243c78ac9f4d3afa7be3ff, 0xee1ae81a72f69c42163740dd2c0304, 0x8f40c80b53c40ee17986633c1965d3, 0x2378be4b395dbefec108a914279506, 0x8347b9d9dc989bae9da9dce46341ee, 0x939c0e5e9017ed5fcffa71da7261bb, 0x4726297f18d4a5a29f01927f73c9f8, 0x2d89c78f8b3a26c96bf0862a72ef01, 0xccf2292fc359c7beffe33474c0c79b, 0x18e8fe2a9e8d0d4f4c526c1a97b0be, 0xa47e2f166cdf310a3e18c03b3a947f, 0x489b914e8a0a0ce0abf8da10ea73a9, 0x1080a0a08a3276be39a5df3ec08622, 0xb33beb346c7ff0c3144811ec69ad78, 0x0131
    // ]
    // );
    let pubkey_redc_param: BN2048 = BigNum::from_array(
        [
        0xba4baae029abaf79370223f822dcb1, 0xba7463552f29fc266e16998778d79f, 0x851d4c66e8e426ca3b07cf13d4bb07, 0x5a6ebce6b380b5ffd793bb1529cb9f, 0x2488a6500574c4609e02e130983f42, 0x1d49571bd3615c2adf64136e409f4f, 0x14e7a95d93ac6cd2723a7fac33d6fd, 0xc4bcf5680fcb4f690f407fd05b23cd, 0x48546e83cc4139294462db99b7f80f, 0x8f4739dd723bb0c2b626527f9c565e, 0xc3fba68de10131c49d6611a6667ce2, 0xcef87738516175ee7390224e94cec7, 0x76f3a0d6b1681c26ce5d89ae67a8fd, 0xfb36e9b787e2ec2b09f70d95720e5e, 0x6a96c27d12f80398c146fbe5bbf40b, 0x4c8dc2089aff029fb0853bb9c6cfc1, 0x6148dacb2348c246461634078e53b6, 0xd6
    ]
    );
    main_real(pubkey, signature, pubkey_redc_param);
}

#[test]
fn test_zk_email() {
        let body_hash: [u8; 32] = dep::std::hash::sha256("The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\n\n15 years ago, Satoshi mined the first block of the Bitcoin blockchain After the Bitcoin white paper appeared on October 31, 2008, on a cryptography mailing list, the Genesis Block — the first bitcoin block and the basis of the entire Bitcoin trading system in place to this day — was mined on January 3, 2009. \n\nThe Genesis Block is also known as Block 0 or Block 1, and is still in the Bitcoin network, where it will remain as long as there is a computer running the Bitcoin software. \n\nAll nodes in the Bitcoin network can consult it, even if it is at the other end of the network with hundreds of thousands of blocks.".as_bytes());
    print(body_hash);
    let signature: BN2048 = BigNum::from_array(
        [
        0xf193c3300b7c9902e32861c38d0d2d, 0x9f6927fdb3df0b84092d8459654327, 0x8a0bea5e2fa82821e49c27b68d5a7b, 0xaa8c0acc1190f9fd845ef64f8e7ae9, 0xa7aeebb37f4395965543e6df69a5a7, 0x087ecef9921569cfba83331ca11c6b, 0x4589ed316ed20757e65ad221736011, 0x0835d8748f11dcc985700c3fea27b1, 0xe870d2493fb83b4a1d72350e5de926, 0x268b28eda0aac07625cfab32b60af1, 0xb41a164eae7ba1602eaec5b5a39fe6, 0x693cc5ec578422bee48eabe390fc37, 0xa29504dd504f14423f2ce65b2ac388, 0x6c3ac6310c084a0b126fcd5225c208, 0xab0903e48563e5f4a5365ac5cbd888, 0xf05bf2e5b6266c0ac88dfc733c414f, 0xf58f9e9669e0f4f3086cce1187fd44, 0xb9
    ]
    );
    let instance: BNInstance = BigNumInstance::new(
        [
        0xe5cf995b5ef59ce9943d1f4209b6ab, 0xe0caf03235e91a2db27e9ed214bcc6, 0xafe1309f87414bd36ed296dacfade2, 0xbeff3f19046a43adce46c932514988, 0x324041af8736e87de4358860fff057, 0xadcc6669dfa346f322717851a8c22a, 0x8b2a193089e6bf951c553b5a6f71aa, 0x0a570fe582918c4f731a0002068df2, 0x39419a433d6bfdd1978356cbca4b60, 0x550d695a514d38b45c862320a00ea5, 0x1c56ac1dfbf1beea31e8a613c2a51f, 0x6a30c9f22d2e5cb6934263d0838809, 0x0a281f268a44b21a4f77a91a52f960, 0x5134dc3966c8e91402669a47cc8597, 0x71590781df114ec072e641cdc5d224, 0xa1bc0f0937489c806c1944fd029dc9, 0x911f6e47f84db3b64c3648ebb5a127, 0xd5
    ],
        [
        0xa48a824e4ebc7e0f1059f3ecfa57c4, 0x05c1db23f3c7d47ad7e7d7cfda5189, 0x79bb6bbbd8facf011f022fa9051aec, 0x24faa4cef474bed639362ea71f7a21, 0x1503aa50b77e24b030841a7d061581, 0x5bbf4e62805e1860a904c0f66a5fad, 0x5cbd24b72442d2ce647dd7d0a44368, 0x074a8839a4460c169dce7138efdaef, 0x0f06e09e3191b995b08e5b45182f65, 0x51fad4a89f8369fe10e5d4b6e149a1, 0xdc778b15982d11ebf7fe23b4e15f10, 0xa09ff3a4567077510c474e4ac0a21a, 0xb37e69e5dbb77167b73065e4c5ad6a, 0xecf4774e22e7fe3a38642186f7ae74, 0x16e72b5eb4c813a3b37998083aab81, 0xa48e7050aa8abedce5a45c16985376, 0xdd3285e53b322b221f7bcf4f8f8ad8, 0x0132
    ]
    );
    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(instance, body_hash, signature));
}
